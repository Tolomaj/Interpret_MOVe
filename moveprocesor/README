Toto je interpret a debugovací program pro MOVe

Co interpret umožòuje?
	Umožòuje náhled na která instrukce se v kódu provádí.

	Má pøíkazi na debug:
		run -> spustí simulaci
		stop -> zastaví simulaci
		key -> pøipojí klávesnici na vstup
	
		hvar -> zvírazní co adresi promìných
		hvare -> zvírazní konec promìnného prostoru 
		hjmp -> zvýrazní zápis do pozicového registru
		hall -> zapne všechno zvýraznování
		clsr -> pøekreslí UI konzole.                   // obèas pøi zvìtšování dìlá konzole zmatky

		step     -> provede jednu instrukci
		clock xx -> nastaví rychlost hodin použitých pokud program bìží
		peek xx  -> zobrazí co register obsahuje
		mv AAA BBB -> pøesune obsah z registru AAA do registru BBB // v debug verzi je tøeba zadávat jako mv001025 // 1 >> 25

Co je MOVe?
	MOVe je programovací jazyk obsahující jen jedinou instrukci a to pøesuò z adresy na adresu.

Jak se v MOVe napøíklad sèítá když umí jen pøesouvat registry?
	Procesor má mnoho registrù které zvládají jednoduché operace.
	
	Napøíklad:

	  MOJE_CISLO ADD_A
	  TVOJE_CISLO ADD_B
	  ADD_OUT MONITOR

	Tento kus kódu provede seètení èísla v registru MOJE_CISLO a èísla TVOJE_CISLO,
	které zapíše na register MONITOR (viditelný v debugeru).


Registry jazyka MOVe:
	Konstanty:
		[VAL_NULL]    obsahuje 0
		[VAL_ONE]     obsahuje 1
		[VAL_TWO]     obsahuje 2
		[VAL_FOUR]    obsahuje 4
		[VAL_SIX]     obsahuje 6
		[VAL_EIGHT]   obsahuje 8
		[VAL_SIXTEEN] obsahuje 16 
		[VAL_NEG]     obsahuje -1

		[RAND] obsahuje náhodné èíslo

	Speciální Registry: 


		[PROG_START]
		[PROG_POS]

		[G_POINTER]       register urèený pro ukládání ukazování do pamìi // !nedodìlané
		[MAX_MEM]         obsahuje velikost maximální pamìti
		[INTERUPT_JMP]    obsahuje adresu skoku pøi interuptu
		[INTERUPT_MODE]   obsahuje zapnutí interuptu. Reaguje na [DISPLAY1], 0 = vyplé, 1 = pøi zmìnì na HIGH, 2 = pøi zmìnì na LOW, 3 = pøi HIGH i LOW. 
		[PRE_INT_ADRESS]

		[PROG_NEXT]
		[PROG_NEXT_TWO]
		[PROG_NEXT_THREE]
		[PROG_NEXT_FOUR]

		[MONITOR]
		[OUTPUT1]
		[OUTPUT2]
		[OUTPUT3]

		[INPUT1]
		[INPUT2]
		[INPUT3]

	Matematické Registry:
		[ADD_OUT] = [ADD_A] + [ADD_B]
		[SUB_OUT] = [SUB_A] - [SUB_B]
		[MUL_OUT] = [MUL_A] * [MUL_B]
		[DIV_OUT] = [DIV_A] / [DIV_B]
		[REM_OUT] = [REM_A] % [REM_B]
		[EQ_OUT]  = [EQ_A] == [EQ_B]
		[OR_OUT]  = [OR_A]  | [OR_B]
		[AND_OUT] = [AND_A] && [AND_B]

		[SHIFT_L_OUT] = [SHIFT_L_A] << 1
		[SHIFT_R_OUT] = [SHIFT_R_A] >> 1

		[SWITCH_OUT] = [SWITCH_S] ? [SWITCH_A] : [SWITCH_B]
		
		[NEG_OUT] = ~[NEG_A] 

		




































Struktura Jazyka MOVe(Compi 1.02):

	[FUNKÈNÍ REGISTRY] #tady se nachází registry jako ADD_A,ADD_B a další 
		...
		...
	[FUNKÈNÍ REGISTRY]

	[PROGRAM_COUNTER] #na první programové adrese je vždy registr další instrukce k proedení
	[PROGRAM_LENNGHT] #na druhé programové adrese konec prostoru promìných a tudíž zaèátek kódu. tento register se jmenuje CODE protože v nìm je uložená adresa první pozice
	
	[PROGRAM_JUMP_ADRESSES] # zde se nachází adresy na návìští které v programu použijeme
			  ...
	[PROGRAM_JUMP_ADRESSES]
	
	[PROGRAM_VARIABLES]		# zde se anchází promìné
			...
	[PROGRAM_VARIABLES]
	
	[PROGRAM_INSTRUCTIONS]	# zde se nachází instrukce, vždy po dvojicích
		    ...
	[PROGRAM_INSTRUCTIONS]