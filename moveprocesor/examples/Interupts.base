#INTERUPT EXAMPLE
# Ukazuje jak pouívat interupt.
#
# I simulačním programu je na interupt připojená klavesnice příkazem "key", 
# lze i poslat jednotlivé znaky pomocí "key a" <- pošle 'a'.
# Klávesa se zapíše na [INPUT2] a první bit v [INPUT1] se zapíše na cvíli 1 na kterou interupt reaguje. 
#
# Inuterup reaguje právě na změny v [INPUT1]
#   INTERUPT_MODE == 0: Interupt vypnutý
#   INTERUPT_MODE == 1: Interupt se zavolá pokud jakýkoli bit v [INPUT1] je nastaven z 0 na 1
#   INTERUPT_MODE == 2: Interupt se zavolá pokud jakýkoli bit v [INPUT1] je nastaven z 1 na 0
#   INTERUPT_MODE == 3: Interupt se zavolá pokud jakýkoli bit v [INPUT1] změní 
#
#Při interuptu se skočí na adresu v registru [INTERUPT_JMP]
# a do [PRE_INT_ADRESS] se nastaví adresa před zkokem aby se dalo z interuptu vrátit
#


DATA:
	TIM 0	#čítač (aby se něco dělo)
CODE:
	
	INTERUPT INTERUPT_JMP #nasatvení kam má interupt skočit
	VAL_TWO INTERUPT_MODE #zapnutí Interuptu při změně na nulu

	TIM ADD_B    <-LOOP #loop který jen počítá a zapisuje na MONITOR
	  VAL_ONE ADD_A
	  ADD_OUT TIM
	  TIM MONITOR
	LOOP PROG_POS #konec loopu



	VAL_NULL INTERUPT_MODE <-INTERUPT #interup jump,
									  #"VAL_NULL >> INTERUPT_MODE" turn off interupt,
									  #becouse you dont want interupt in interupt most time 

	INPUT2 MONITOR		  #vysání znaku na [MONITOR]

	VAL_TWO INTERUPT_MODE <-END_INTERUPT #zapnutí interuptu zpět (2 instrukce po nastavení interuptu ,interupt nereguje)
	PRE_INT_ADRESS PROG_POS           #skočení zpět kde program zkončil